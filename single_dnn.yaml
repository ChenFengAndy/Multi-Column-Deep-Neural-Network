# THEANO_FLAGS="device=gpu, floatX=float32" train.py cifar10.yaml
!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.cifar10.CIFAR10 {
            which_set: 'train',
            one_hot: 1,
#            start: 0,
            stop: 2000,
            axes: ['c', 0, 1, 'b']
     },
#    dataset: &train !obj:pylearn2.datasets.zca_dataset.ZCA_Dataset {
#            preprocessed_dataset: !pkl: "${PYLEARN2_DATA_PATH}/cifar10/pylearn2_gcn_whitened/train.pkl",
#            preprocessor: !pkl: "${PYLEARN2_DATA_PATH}/cifar10/pylearn2_gcn_whitened/preprocessor.pkl",
#            start: 0,
#            stop: 40000,
#            axes: ['c', 0, 1, 'b']
#    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: &window_shape [32, 32],
            num_channels: 3,
            axes: ['c', 0, 1, 'b'],
        },
        layers: [
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h1',
                     pad: 0,                  # add padding before convolution
                     #tied_b: 1,               # If true, all biases in the same channel are constrained to be the same
                                               # as each other. Otherwise, each bias at each location is learned independently.
                     #W_lr_scale: .05,         # The learning rate on the weights for this layer is multiplied by this scaling factor
                     #b_lr_scale: .05,         # The learning rate on the biases for this layer is multiplied by this scaling factor
                     num_channels: 50,        # The number of output channels the layer should have. Note that it must
                                              # internally compute num_channels * num_pieces convolution channels.
                     num_pieces: 1,           # The number of linear pieces used to make each maxout unit.
                     kernel_shape: [8, 8],    # done
                     pool_shape: [3, 3],      # max pooling shape done
                     pool_stride: [2, 2],    # The distance between the start of each max pooling region. Defaults
                                              # to num_pieces, which makes the pooling regions disjoint. If set to
                                              # a smaller number, can do overlapping pools.
                     irange: .005,
#                     max_kernel_norm: .9,     # If specified, each kernel is constrained to have at most this norm.
#                     partial_sum: 33,         # a parameter that controls whether to prefer runtime savings or memory
                                              # savings when computing the gradient with respect to the kernels.
                                              # See pylearn2.sandbox.cuda_convnet.weight_acts.py for details. The default
                                              # is to prefer high speed. Note that changing this setting may change the value
                                              # of computed results slightly due to different rounding error

                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h2',
                     pad: 0,
                     num_channels: 50,
                     num_pieces: 1,
                     kernel_shape: [4, 4],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     irange: .005,
#                     max_kernel_norm: 1.9365,
#                     partial_sum: 15,
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                    layer_name: 'h3',
                    dim: 30
                 },
                 !obj:pylearn2.models.mlp.Softmax {
#                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
        ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .17,
        init_momentum: .5,
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                              which_set: 'train',
                              one_hot: 1,
                              start: 40000,
                              stop:  50000,
                              axes: ['c', 0, 1, 'b']
                          },
                'test'  : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                              which_set: 'test',
                              one_hot: 1,
                              stop: 1000,
                              axes: ['c', 0, 1, 'b']
                          },

#                'valid' : &valid !obj:pylearn2.datasets.zca_dataset.ZCA_Dataset {
#                preprocessed_dataset: !pkl: "${PYLEARN2_DATA_PATH}/cifar10/pylearn2_gcn_whitened/train.pkl",
#                preprocessor: !pkl: "${PYLEARN2_DATA_PATH}/cifar10/pylearn2_gcn_whitened/preprocessor.pkl",
#                start: 40000,
#                stop: 50000,
#                axes: ['c', 0, 1, 'b']
#                          },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0' : 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "./test_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .65
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 500,
            decay_factor: .01
        }
#        ,
#        !obj:pylearn2.train_extensions.window_flip.WindowAndFlip {
#            pad_randomized: 8,
#            window_shape: *window_shape,
#            randomize: [ *train],
#            center: [ *valid ]
#        }
    ],
    save_path: "./test.pkl",
    save_freq: 1
}