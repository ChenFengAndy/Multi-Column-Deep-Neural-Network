!obj:pylearn2.train.Train {

    dataset: &train !obj:pylearn2.datasets.cifar10.CIFAR10 {
        toronto_prepro: True,
        which_set: 'train',
        one_hot: 1,
        axes: ['c', 0, 1, 'b'],
        start: 0,
        stop: 40000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
        layers: [
                  !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     pad: 4,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 64,
                     num_pieces: 1,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                     partial_sum: 33,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h1',
                     pad: 3,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 128,
                     num_pieces: 1,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: 1.9365,
                     partial_sum: 15,
                 },
#                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
#                     layer_name: 'h0',
#                     pad: 4,
#                     tied_b: 1,
#                     W_lr_scale: .05,
#                     b_lr_scale: .05,
#                     num_channels: 32,
#                     num_pieces: 1,
#                     kernel_shape: [8, 8],
#                     pool_shape: [4, 4],
#                     pool_stride: [2, 2],
#                     irange: .005,
#                     max_kernel_norm: .9,
#                     partial_sum: 33,
#                     min_zero: 1
#                 },
#                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
#                     layer_name: 'h1',
#                     pad: 0,
#                     num_channels: 32,
#                     num_pieces: 1,
#                     kernel_shape: [8, 8],
#                     pool_shape: [4, 4],
#                     pool_stride: [2, 2],
#                     irange: .01,
#                     min_zero: True,
#                     W_lr_scale: 1.,
#                     b_lr_scale: 2.,
#                     tied_b: True,
#                     max_kernel_norm: 9.9,
#                 },
                 !obj:pylearn2.models.maxout.Maxout {
                    layer_name: 'h3',
                    irange: .005,
                    num_units: 500,
                    num_pieces: 5,
                    max_col_norm: 1.9
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: &window_shape [32, 32],
            num_channels: 3,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .9,
        },
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
               'train': *train,

               'valid' : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                              toronto_prepro: True,
                              axes: ['c', 0, 1, 'b'],
                              which_set: 'train',
                              one_hot: 1,
                              start: 40000,
                              stop:  50000
                          },
                'test'  : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                              toronto_prepro: True,
                              axes: ['c', 0, 1, 'b'],
                              which_set: 'test',
                              one_hot: 1,
                          }
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : 1. },
            input_scales: { 'h0' : 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 50
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "pkl/singlecolumn_complex_toronto_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .6
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 500,
            decay_factor: .01
        },
    ],
    save_path: "pkl/singlecolumn_complex_toronto.pkl",
    save_freq: 5
}
