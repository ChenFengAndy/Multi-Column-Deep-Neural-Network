# LAVORO IN B01C per dataset e fo conversione dentro

!obj:pylearn2.train.Train {

    dataset: &train !obj:create_dataset.load_dataset {
        which_set: 'train',
    },

    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,

        input_space: !obj:pylearn2.space.CompositeSpace {
          components: [
              !obj:pylearn2.space.Conv2DSpace {
              shape: [32, 32],
              num_channels: 3,
              axes: ['b', 0, 1, 'c']
              },
              !obj:pylearn2.space.Conv2DSpace {
              shape: [32, 32],
              num_channels: 3,
              axes: ['b', 0, 1, 'c']
              }
           ],
        },
        input_source: ['features0', 'features1'],

        layers: [
                 !obj:pylearn2.models.mlp.CompositeLayer {
                    layer_name: 'h0',
                        layers: [
                            !obj:pylearn2.models.mlp.MLP {
                              layer_name: 'column0',
                              layers: [
                                  !obj:pylearn2.models.mlp.SpaceConverter {
                                              layer_name: 'spconveter0',
                                              output_space: !obj:pylearn2.space.Conv2DSpace {
                                                    shape: [32, 32],
                                                    num_channels: 3,
                                                    axes: ['c', 0, 1, 'b'],
                                                },
                                  },
                                  !obj:pylearn2.models.maxout.MaxoutConvC01B {
                                     layer_name: 'column0conv1',
                                     pad: 0,
                                     num_channels: 32,
                                     num_pieces: 1,
                                     kernel_shape: [5, 5],
                                     pool_shape: [3, 3],
                                     pool_stride: [2, 2],
                                     irange: .01,
                                     min_zero: True,
                                     W_lr_scale: 1.,
                                     b_lr_scale: 2.,
                                     tied_b: True,
                                     max_kernel_norm: 9.9,
                                  },
                                  !obj:pylearn2.models.maxout.MaxoutConvC01B {
                                     layer_name: 'column0conv2',
                                     pad: 0,
                                     num_channels: 32,
                                     num_pieces: 1,
                                     kernel_shape: [8, 8],
                                     pool_shape: [4, 4],
                                     pool_stride: [2, 2],
                                     irange: .01,
                                     min_zero: True,
                                     W_lr_scale: 1.,
                                     b_lr_scale: 2.,
                                     tied_b: True,
                                     max_kernel_norm: 9.9,
                                  },
                                  !obj:pylearn2.models.maxout.Maxout {
                                      layer_name: 'N0',
                                      irange: .005,
                                      num_units: 300,
                                      num_pieces: 5,
                                      max_col_norm: 1.9
                                   },

                              ],
                            },
                            !obj:pylearn2.models.mlp.MLP {
                              layer_name: 'column1',
                              layers: [
                                  !obj:pylearn2.models.mlp.SpaceConverter {
                                              layer_name: 'spconveter1',
                                              output_space: !obj:pylearn2.space.Conv2DSpace {
                                                    shape: [32, 32],
                                                    num_channels: 3,
                                                    axes: ['c', 0, 1, 'b'],
                                                },
                                  },
                                  !obj:pylearn2.models.maxout.MaxoutConvC01B {
                                     layer_name: 'column1conv1',
                                     pad: 0,
                                     num_channels: 32,
                                     num_pieces: 1,
                                     kernel_shape: [5, 5],
                                     pool_shape: [3, 3],
                                     pool_stride: [2, 2],
                                     irange: .01,
                                     min_zero: True,
                                     W_lr_scale: 1.,
                                     b_lr_scale: 2.,
                                     tied_b: True,
                                     max_kernel_norm: 9.9,
                                  },
                                  !obj:pylearn2.models.maxout.MaxoutConvC01B {
                                     layer_name: 'column1conv2',
                                     pad: 0,
                                     num_channels: 32,
                                     num_pieces: 1,
                                     kernel_shape: [8, 8],
                                     pool_shape: [4, 4],
                                     pool_stride: [2, 2],
                                     irange: .01,
                                     min_zero: True,
                                     W_lr_scale: 1.,
                                     b_lr_scale: 2.,
                                     tied_b: True,
                                     max_kernel_norm: 9.9,
                                  },
                                  !obj:pylearn2.models.maxout.Maxout {
                                      layer_name: 'N1',
                                      irange: .005,
                                      num_units: 300,
                                      num_pieces: 5,
                                      max_col_norm: 1.9
                                   },

                              ],
                            },

                        ],
                    inputs_to_layers: {
                            0: [0],
                            1: [1],
                    },

                 }, # end composite layer
                 !obj:custom_layers.Average {
                    layer_name: 'avg'
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                    layer_name: 'y',
                    n_classes: 10,
                    istdev: .01,
                    W_lr_scale: 1.,
                    b_lr_scale: 2.,
                    max_col_norm: 9.9365
                 }

                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 128,
        learning_rate: .1,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .9,
        },
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {

                'valid' : !obj:create_dataset.load_dataset {
                            which_set: 'valid',
                          },
                'test'  : !obj:create_dataset.load_dataset {
                            which_set: 'test',
                          },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : 1. },
            input_scales: { 'h0' : 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 50
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "pkl/multicolumn_complex_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .6
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 500,
            decay_factor: .01
        },
#        ,
#        !obj:pylearn2.train_extensions.window_flip.WindowAndFlip {
#            pad_randomized: 8,
#            window_shape: *window_shape,
#            randomize: [ *train],
#            center: [ *valid ]
#        }
    ],
    save_path: "pkl/multicolumn_complex.pkl",
    save_freq: 5
}
